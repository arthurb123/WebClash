declare const ArrayBufferView: any;
export { ArrayBufferView };
export declare type USVString = string;
export declare type ChannelId = string | undefined;
export declare type EventName = string;
export declare type RoomId = ChannelId;
export declare type Data = string | number | Object;
export declare type Payload = {
    [eventName: string]: Data;
};
export declare type RawMessage = USVString | ArrayBuffer | ArrayBufferView;
export interface ServerOptions {
    iceServers?: RTCIceServer[];
    iceTransportPolicy?: RTCIceTransportPolicy;
    label?: string;
    ordered?: boolean;
    maxRetransmits?: number;
    maxPacketLifeTime?: number;
}
export interface ClientOptions {
    iceServers?: RTCIceServer[];
    iceTransportPolicy?: RTCIceTransportPolicy;
    url?: string;
    port?: number;
    label?: string;
}
export interface EventCallbackClient {
    (data: Data): void;
}
export interface EventCallbackServer {
    (data: Data, senderId?: ChannelId): void;
}
export interface EventCallbackRawMessage {
    (rawMessage: RawMessage): void;
}
export interface ConnectionEventCallbackClient {
    (error?: Error): void;
}
export interface ConnectionEventCallbackServer {
    (channel: any): void;
}
export interface EventOptions {
    roomId?: RoomId;
    senderId?: ChannelId;
    id?: ChannelId;
}
//# sourceMappingURL=typings.d.ts.map