"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bridge_1 = __importDefault(require("@geckos.io/common/lib/bridge"));
var http_1 = __importDefault(require("http"));
var channel_1 = __importDefault(require("./wrtc/channel"));
exports.ServerChannel = channel_1.default;
var constants_1 = require("@geckos.io/common/lib/constants");
var connectionsManager_1 = __importDefault(require("./wrtc/connectionsManager"));
var httpServer_1 = __importDefault(require("./httpServer/httpServer"));
var GeckosServer = /** @class */ (function () {
    function GeckosServer(options) {
        this.connectionsManager = new connectionsManager_1.default(options);
    }
    /**
     * Make the server listen on a specific port.
     * @param port Default port is 9208.
     */
    GeckosServer.prototype.listen = function (port) {
        var _this = this;
        if (port === void 0) { port = 9208; }
        this._port = port;
        // create the server
        var server = http_1.default.createServer();
        // add all routes
        httpServer_1.default(server, this.connectionsManager);
        // start the server
        server.listen(port, function () {
            console.log("Geckos.io signaling server is running on http://localhost:" + port);
            server.once('close', function () {
                _this.connectionsManager.connections.forEach(function (connection) { return connection.close(); });
            });
        });
    };
    /**
     * Add a existing http server.
     * @param server Your http.Server.
     */
    GeckosServer.prototype.addServer = function (server) {
        var _this = this;
        httpServer_1.default(server, this.connectionsManager);
        server.once('close', function () {
            _this.connectionsManager.connections.forEach(function (connection) { return connection.close(); });
        });
    };
    Object.defineProperty(GeckosServer.prototype, "port", {
        get: function () {
            return this._port;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Emit a message to all channels.
     * @param eventName The event name.
     * @param data The data you want to send.
     */
    GeckosServer.prototype.emit = function (eventName, data) {
        var _a;
        bridge_1.default.emit(constants_1.EVENTS.SEND_TO_ALL, (_a = {}, _a[eventName] = data, _a));
    };
    /**
     * Emit a message to a specific room.
     * @param roomId The roomId.
     */
    GeckosServer.prototype.room = function (roomId) {
        if (roomId === void 0) { roomId = undefined; }
        return {
            emit: function (eventName, data) {
                var _a;
                bridge_1.default.emit(constants_1.EVENTS.SEND_TO_ROOM, (_a = {}, _a[eventName] = data, _a), {
                    roomId: roomId
                });
            }
        };
    };
    /** Listen for a new connection. */
    GeckosServer.prototype.onConnection = function (callback) {
        bridge_1.default.on(constants_1.EVENTS.CONNECTION, function (channel) {
            var cb = function (channel) { return callback(channel); };
            cb(channel);
        });
    };
    /**
     * Listen for a message.
     * @param eventName The event name.
     * @param callback The event callback.
     */
    GeckosServer.prototype.on = function (eventName, callback) {
        this._on(eventName, callback);
    };
    GeckosServer.prototype._on = function (eventName, callback) {
        if (callback === void 0) { callback = function () { }; }
        bridge_1.default.on(eventName, function (channel, eventOptions) {
            var cb = function (channel, eventOptions) { return callback(channel, eventOptions); };
            cb(channel, eventOptions.senderId);
        });
    };
    return GeckosServer;
}());
exports.GeckosServer = GeckosServer;
/**
 * The geckos.io server library.
 * @param options.iceServers An array of RTCIceServers. See https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer.
 * @param options.iceTransportPolicy RTCIceTransportPolicy enum defines string constants which can be used to limit the transport policies of the ICE candidates to be considered during the connection process.
 * @param options.label A human-readable name for the channel. This string may not be longer than 65,535 bytes. Default: 'geckos.io'.
 * @param options.ordered Indicates whether or not messages sent on the RTCDataChannel are required to arrive at their destination in the same order in which they were sent (true), or if they're allowed to arrive out-of-order (false). Default: false.
 * @param options.maxPacketLifeTime The maximum number of milliseconds that attempts to transfer a message may take in unreliable mode. While this value is a 16-bit unsigned number, each user agent may clamp it to whatever maximum it deems appropriate. Default: null.
 * @param options.maxRetransmits The maximum number of times the user agent should attempt to retransmit a message which fails the first time in unreliable mode. While this value is a16-bit unsigned number, each user agent may clamp it to whatever maximum it deems appropriate. Default: 0.
 */
var geckosServer = function (options) {
    if (options === void 0) { options = {}; }
    var iceTransportPolicy = options.iceTransportPolicy;
    if (iceTransportPolicy === 'relay') {
        console.error("WARNING: iceTransportPolicy \"relay\" does not work yet on the server!");
        options.iceTransportPolicy = 'all';
    }
    return new GeckosServer(options);
};
exports.default = geckosServer;
//# sourceMappingURL=server.js.map