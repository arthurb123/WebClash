import WebRTCConnection from './webrtcConnection';
import EventEmitter from 'eventemitter3';
import { Data, RoomId, EventCallbackServer, RawMessage, EventName, ConnectionEventCallbackServer, EventCallbackRawMessage, ServerOptions } from '@geckos.io/common/lib/typings';
export default class ServerChannel {
    webrtcConnection: WebRTCConnection;
    private _roomId;
    private _id;
    private dataChannel;
    eventEmitter: EventEmitter<string | symbol>;
    constructor(webrtcConnection: WebRTCConnection, dataChannelOptions: ServerOptions);
    /** Get the channel's id. */
    get id(): string | undefined;
    /** Get the channel's roomId. */
    get roomId(): string | undefined;
    /**
     * Listen for the disconnect event.
     * @param callback The event callback.
     */
    onDisconnect(callback: ConnectionEventCallbackServer): void;
    /** Close the webRTC connection. */
    close(): void;
    /** Join a room by its id. */
    join(roomId: RoomId): void;
    /** Leave the current room. */
    leave(): void;
    /** Emit a message to all channels in the same room. */
    get room(): {
        /**
         * Emit a message to the current room.
         * @param eventName The event name.
         * @param data The data to send.
         */
        emit: (eventName: string, data: Data) => void;
    };
    /** Broadcast a message to all channels in the same room, except the sender's. */
    get broadcast(): {
        /**
         * Emit a broadcasted message.
         * @param eventName The event name.
         * @param data The data to send.
         */
        emit: (eventName: string, data: Data) => void;
    };
    /**
     * Forward a message to all channels in a specific room.
     * @param roomId The roomId.
     */
    forward(roomId: RoomId): {
        /**
         * Emit a forwarded message.
         * @param eventName The event name.
         * @param data The data to send.
         */
        emit: (eventName: string, data: Data) => void;
    };
    /**
     * Emit a message to the channel.
     * @param eventName The event name.
     * @param data The data to send.
     */
    emit(eventName: EventName, data?: Data | null): void;
    private _emit;
    /** Send a raw message. */
    get raw(): {
        /**
         * Emit a raw message.
         * @param rawMessage The raw message. Can be of type 'USVString | ArrayBuffer | ArrayBufferView'
         */
        emit: (rawMessage: RawMessage) => void;
    };
    /**
     * Listen for raw messages.
     * @param callback The event callback.
     */
    onRaw(callback: EventCallbackRawMessage): void;
    /**
     * Listen for a message.
     * @param eventName The event name.
     * @param callback The event callback.
     */
    on(eventName: EventName, callback: EventCallbackServer): void;
}
//# sourceMappingURL=channel.d.ts.map